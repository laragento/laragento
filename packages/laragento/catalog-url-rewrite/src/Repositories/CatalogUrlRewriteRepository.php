<?php

namespace Laragento\CatalogUrlRewrite\Repositories;

use Laragento\Catalog\Models\Category\Entity\Integer;
use Laragento\Catalog\Models\Category\Entity\Text;
use Laragento\Catalog\Models\Category\Entity\Varchar;
use Laragento\Catalog\Support\Facades\CategoryFacade;
use Laragento\CatalogUrlRewrite\Models\UrlRewrite;
use Laragento\Eav\Models\Attribute;
use Laragento\Eav\Repositories\AttributeRepositoryInterface;
use Laragento\Store\Models\Store;

class CatalogUrlRewriteRepository implements CatalogUrlRewriteRepositoryInterface
{
    protected $attributeRepository;

    public function __construct(
        AttributeRepositoryInterface $attributeRepository
    ) {
        $this->attributeRepository = $attributeRepository;
    }

    /**
     * @param $entityType
     * @todo refactor and test
     */
    public function generateUrlRewrites($entityType)
    {
        $stores = [0, 2];
        foreach ($stores as $storeId) {

            $categories = CategoryFacade::all();

            foreach ($categories as $category) {
//                $entities = $category
//                    ->entities
//                    ->mapWithKeys(function ($item) {
//                        return [$item->attribute->attribute_code => $item['value']];
//                    });


                if($storeId == 0) // What about italian???
                {
                    $rewriteStoreId = 1;
                    $translatedStoreId = 2;
                }else{
                    $rewriteStoreId = $storeId;
                    $translatedStoreId = 0;
                }



                // Ignore root category @todo improve
                if ($category->getKey() == '1') {
                    continue;
                }

//                if($category->getKey() != 43){
//                    continue;
//                }

                $urlKeyValue = null;
                $urlPathValue = null;
                $translatedPathValue = null;
                try {
                    $urlKey = $this->data('url_key', $category->getKey(), $storeId);
                    if($urlKey)
                    {
                        $urlKeyValue = $urlKey->value;
                    }else{
                        continue;
                    }

                    $urlPath = $this->data('url_path', $category->getKey(), $storeId);
                    if($urlPath)
                    {
                        $urlPathValue = $urlPath->value;
                    }else{
                        continue;
                    }

                    $translatedPath = $this->data('url_path', $category->getKey(), $translatedStoreId);
                    if($translatedPath)
                    {
                        $translatedPathValue = $translatedPath->value;
                    }else{
                        //continue;
                    }
                } catch (\Exception $e) {
                    print_r($e->getMessage());
                }

                // Ignore when url_path is missing
                if ($urlPathValue == '' || !$urlPathValue) {
                    continue;
                }

                // Ignore when url_key is missing
                if ($urlKeyValue == '' || !$urlKeyValue) {
                    continue;
                }

                if($urlKeyValue != $urlPathValue){
                    // URL KEYS FOR
                    //  from /de/bouillon
                    //  to   /de/kueche/bouillon

                    UrlRewrite::firstOrCreate([
                        'entity_type' => $entityType,
                        'entity_id' => $category->getKey(),
                        'request_path' => $urlKeyValue,
                        'target_path' => $urlPathValue,
                        'redirect_type' => 301,
                        'store_id' => $rewriteStoreId,
                        'description' => null,
                        'is_autogenerated' => 0,
                        'metadata' => '[]',
                    ]);
                }

                if($translatedPathValue != $urlPathValue){
                    // URL KEYS FOR Language Switch F -> D
                    //  from /de/cuisine/bouillons
                    //  to   /de/kueche/bouillon


                    UrlRewrite::firstOrCreate([
                        'entity_type' => $entityType,
                        'entity_id' => $category->getKey(),
                        'request_path' => $translatedPathValue,
                        'target_path' => $urlPathValue,
                        'redirect_type' => 301,
                        'store_id' => $rewriteStoreId,
                        'description' => null,
                        'is_autogenerated' => 0,
                        'metadata' => null,
                    ]);
                }

                // URL KEYS FOR Language Switch D -> F
                //  from /fr/kueche/bouillon
                //  to   /fr/cuisine/bouillons

//                print_r([
//                    'entity_type' => $entityType,
//                    'entity_id' => $category->getKey(),
//                    'request_path' => $this->keyExist($entities, 'url_path'),
//                    'target_path' => $translatedPath->value,
//                    'redirect_type' => 301,
//                    'store_id' => 2,
//                    'description' => null,
//                    'is_autogenerated' => 1,
//                    'metadata' => '[]',
//                ]);
            }

            // Are those redirects even needed?
            //  from /fr/kueche/bouillons
            //  to   /fr/cuisine/bouillons

        }


    }

    public function keyExist($attribute, $key)
    {
        if (!isset($attribute[$key])) {
            return null;
        }
        return $attribute[$key];
    }


    /**
     * Returns attribute value by category_id and attribute_code
     *
     * @todo merge with packages/laragento/catalog/src/Repositories/Product/ProductAttributeRepository.php
     * @todo attention on $storeId
     * @param $attributeCode
     * @param $entityId
     * @param $storeId
     * @return bool
     * @throws \Exception
     */
    public function data($attributeCode, $entityId, $storeId)
    {
        //$attribute = $this->attributeRepository::attribute($attributeCode);
        $attribute = Attribute::whereAttributeCode($attributeCode)->whereEntityTypeId(3)->first();

        if (!$attribute) {
            throw new \Exception('Attribute Code ' . $attributeCode . ' not found');
        }
        $where = [
            'attribute_id' => $attribute->attribute_id,
            'entity_id' => $entityId,
            'store_id' => $storeId
        ];

        return $this->dataByAttribute($attribute, $where);
    }

    /**
     * @todo merge with packages/laragento/catalog/src/Repositories/Product/ProductAttributeRepository.php
     * @todo only works with categories (models are for categories)
     *
     * @param $attribute
     * @param $where
     * @return mixed
     *
     */
    public function dataByAttribute($attribute, $where)
    {
        switch ($attribute->backend_type) {
            case 'varchar':
                return Varchar::where($where)->first();
            case 'int':
                return Integer::where($where)->first();
            case 'text':
                return Text::where($where)->first();
            default :
                dd('backend_type' . $attribute->backend_type . 'is missing');
        }
    }
}